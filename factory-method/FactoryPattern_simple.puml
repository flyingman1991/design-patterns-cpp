@startuml FactoryPattern_Simple

interface Product {
    + {abstract} ~Product()
    + {abstract} getName() = 0 : std::string
}

class ConcreteProductA {
    + ~Product()
    + getName() = 0 : std::string
}

class ConcreteProductB {
    + ~Product()
    + getName() = 0 : std::string
}

interface Creator {
    + {abstract} ~Creator()
    + {abstract} createProductA() = 0 : Product*
    + {abstract} createProductB() = 0 : Product*
    + {abstract} removeProduct(Product *product) = 0 : void
}

class ConcreteCreator {
    + ~Creator()
    + createProductA() : Product*
    + createProductB() : Product*
    + removeProduct(Product *product) : void
}

ConcreteProductA ..|> Product : implementation
ConcreteProductB ..|> Product : implementation
ConcreteCreator ..|> Creator : implementation
ConcreteCreator ..> ConcreteProductA : dependency
ConcreteCreator ..> ConcreteProductB : dependency
client ..> ConcreteCreator : dependency
client ..> Product : dependency

note as N1
    This is similar with <b>Simple-Factory</b> method.
    One factory can produce all kinds of products
    according to passed product type.
    <b>There are some improvement:</b>
    1. using <b>static</b> method in factory class
    2. passing a <b>type</b> name instead of different
    function names

    <b>Disadvantages:</b>
    Factory has to know all concrete products.
    if products are changed, factory needs to be
    modified.
end note

note left of client
    client use pointers or references to
    <b>Creator</b> and <b>Product</b>.
end note

@enduml