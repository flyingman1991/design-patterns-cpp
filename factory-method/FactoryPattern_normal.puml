@startuml FactoryPattern_Normal

interface Product {
    + {abstract} ~Product()
    + {abstract} getName() = 0 : std::string
}

class ConcreteProductA {
    + ~Product()
    + getName() = 0 : std::string
}

class ConcreteProductB {
    + ~Product()
    + getName() = 0 : std::string
}

interface Creator {
    + {abstract} ~Creator()
    + {abstract} createProduct() = 0 : Product*
    + {abstract} removeProduct(Product *product) = 0 : void
}

class ConcreteCreatorA {
    + ~Creator()
    + createProduct() : Product*
    + removeProduct(Product *product) : void
}

class ConcreteCreatorB {
    + ~Creator()
    + createProduct() : Product*
    + removeProduct(Product *product) : void
}

ConcreteProductA ..|> Product : implementation
ConcreteProductB ..|> Product : implementation
ConcreteCreatorA ..|> Creator : implementation
ConcreteCreatorB ..|> Creator : implementation
ConcreteCreatorA ..> ConcreteProductA : dependency
ConcreteCreatorB ..> ConcreteProductB : dependency
client ..> ConcreteCreatorA : dependency
client ..> ConcreteCreatorB : dependency
client ..> Product : dependency

note as N1
    This is <b>Normal-Factory</b> method.
    Different factory produce corresponding products.

    <b>Advantages:</b>
    If products are added, implent a new kinds of
    concrete factory.
    Comply with the <b>Open-Close</b> principle.

    <b>Disadvantages:</b>
    Each new product requires a new factory.
end note

note left of client
    client use pointers or references to
    <b>Creator</b> and <b>Product</b>.
end note

@enduml