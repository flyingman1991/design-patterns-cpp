@startuml FacadePattern

package ComplexSubsystem #DDDDDD {
    class SubsystemA {
        + subOperation() : void
    }

    class SubsystemB {
        + subOperation() : void
    }

    class SubsystemC {
        + subOperation() : void
    }
}

class Facade {
    __private member__
    - ptr_a : SubsystemA *
    - ptr_b : SubsystemB *
    - ptr_c : SubsystemC *
    __public methods__
    + operation_1() : void
    + operation_2() : void
}

client ..> Facade : dependency
Facade --> SubsystemA : association
Facade --> SubsystemB : association
Facade --> SubsystemC : association

note as N1
    <b>Situation:</b>
    If Clients need to deal with many objects
    to complete the desired function, which makes
    system too complex.
    Add a new layer to encapsulate each object
    into a subsystem, then client depends on this
    new layer only... The changes in subsystem has
    NO impact on client.
end note

@enduml