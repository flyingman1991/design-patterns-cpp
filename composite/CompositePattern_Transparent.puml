@startuml CompositePattern

interface Component {
    + {abstract} getChild(int index)=0 : Component *
    + {abstract} add(Component *)=0 : void
    + {abstract} remove(int index)=0 : void
    + {abstract} operation()=0 : void
}

class Composite {
    + getChild(int index) : Component *
    + add(Component *) : void
    + remove(int index) : void
    + operation() : void
    - m_Childs : std::vector<Component*>
}

class Leaf {
    + getChild(int index) : Component *
    + add(Component *) : void
    + remove(int index) : void
    + operation() : void
}

Composite "1" o--> "many" Component : aggregation
Composite .up.|> Component : implementation
Leaf .up.|> Component : implementation
client ..> Component : dependency

note  as N1
    <b>Use Scenarios:<b>
    1. representing the <b>partial-overall</b> hierarchy of objects;
    2. ignore the difference between a composite object and a single object,
       user can use all objects in the composite structure uniformly.
    <b>Transparent Mode:</b>
    The clint does NOT need to distinguish composite or leaf.
end note

note left of client
    In transparent mode, client see Leaf and Composite
    as the same object, which is called <font color="Red">Access Consistency</font>.
    This is the original intention of this model.
    <b>However, Leaf should also implement methods to</b>
    <b>manage subobjects(might be empty implementation.)</b>
end note

note left of Component
    The common interface of leaf and branch.
    It can provide some default implementation.
    In <font color="Blue">Transparent mode</font>, it also declare interface
    to access and manager subobjects;
    In <font color="Blue">Safe mode</font>, branch structure manage sub-
    objects instead of Component.
end note

note bottom of Leaf
    It's a leaf node object in a composition.
    It has no child nodes, but it also needs to
    implement add()„ÄÅremove() interface.
    So usually empty implementation might be used.
end note

note bottom of Composite
    It's a branch node object in the composition.
    It has child nodes, which are used to inherit
    and implement abstract components.
    Its <b>main functions</b> are to <b>store and manage sub-</b>
    <b>assemblies</b>, usually including add(), remove(), getchild()...
end note

@enduml